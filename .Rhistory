a_sensitivity <- sum(validation$Prediction == validation$Actual & validation$Prediction == 'Approved') / sum(validation$Actual == 'Approved')
d_precision <- sum(validation$Prediction == validation$Actual & validation$Prediction == 'Declined') / sum(validation$Prediction == 'Declined')
d_sensitivity <- sum(validation$Prediction == validation$Actual & validation$Prediction == 'Declined') / sum(validation$Actual == 'Declined')
print(table(Pred. = validation$Prediction, Actual = validation$Actual))
cat('Automation Level: ', automation, '\n')
cat('Accuracy Level: ', accuracy, '\n')
cat('Approval Precision Level: ', a_precision, '\n')
cat('Approval Sensitivity Level: ', a_sensitivity, '\n')
cat('Denial Precision Level: ', d_precision, '\n')
cat('Denial Sensitivity Level: ', d_sensitivity, '\n')
}
sub_train <- train %>% sample_frac(.8)
sub_valid <- anti_join(train, sub_train, by='LoanNumber')
sub_train <- cleanAutoLoanData(sub_train, TRUE)
fit_val <- glm(Approved ~  AppReceiveDate_cu + AppReceiveDate_sq + AppReceiveDate + isCredit_F + isCredit_D + isCredit_C + isCredit_B + ModifiedCreditScore_cu + ModifiedCreditScore_sq + ModifiedCreditScore + BankruptcyCredit + ModifiedBankruptcyScore_sq + ModifiedBankruptcyScore + CurrentEmployedMonths_ln + TotalMonthlyIncome_ln + isLowDebt + isUndecided + isHighMileage + isNewVehicle + TotalVehicleValue_ln + AmountRequested + isHomeowner +LTV_sq + LTV + DTI_cu + DTI_sq + DTI +  MemberIndicator + CoApplicantIndicator, data = sub_train, family = binomial())
validation_results <- LoanDecider_val(fit_val, sub_valid)
showValidationStats(validation_results)
train_clean <- cleanAutoLoanData(train, df.train = TRUE)
fit <- glm(Approved ~  AppReceiveDate_cu + AppReceiveDate_sq + AppReceiveDate + isCredit_F + isCredit_D + isCredit_C + isCredit_B + ModifiedCreditScore_cu + ModifiedCreditScore_sq + ModifiedCreditScore + BankruptcyCredit + ModifiedBankruptcyScore_sq + ModifiedBankruptcyScore + CurrentEmployedMonths_ln + TotalMonthlyIncome_ln + isLowDebt + isUndecided + isHighMileage + isNewVehicle + TotalVehicleValue_ln + AmountRequested + isHomeowner +LTV_sq + LTV + DTI_cu + DTI_sq + DTI +  MemberIndicator + CoApplicantIndicator, data = train_clean, family = binomial())
LoanDecider <- function(model, df, override = TRUE, lower.bound = 0.5, upper.bound = 0.5){
df_clean <- df %>%
mutate(AppReceiveDate = as.numeric(as.Date(AppReceiveDate, format = '%m/%d/%Y')) - 16436,
LTV = replace(LTV, LTV > 2.5, 2.5),
LTV = replace(LTV, is.na(LTV), 1),
DTI = replace(DTI, DTI > 0.5 | is.na(DTI), 0.5),
OccupancyStatus = replace(OccupancyStatus, is.na(OccupancyStatus), 'OTHER')) %>%
transmute(LoanNumber = LoanNumber,
AppReceiveDate_cu = AppReceiveDate ** 3,
AppReceiveDate_sq = AppReceiveDate ** 2,
AppReceiveDate = AppReceiveDate,
isCredit_F = as.numeric(ModifiedCreditScore == 0),
isCredit_D = as.numeric(ModifiedCreditScore >= 400 & ModifiedCreditScore < 630),
isCredit_C = as.numeric(ModifiedCreditScore >= 630 & ModifiedCreditScore < 670),
isCredit_B = as.numeric(ModifiedCreditScore >= 670 & ModifiedCreditScore < 740),
ModifiedCreditScore_cu = ModifiedCreditScore ** 3,
ModifiedCreditScore_sq = ModifiedCreditScore ** 2,
ModifiedCreditScore = ModifiedCreditScore,
BankruptcyCredit = ModifiedCreditScore * ModifiedBankruptcyScore,
ModifiedBankruptcyScore_sq = ModifiedBankruptcyScore **2,
ModifiedBankruptcyScore = ModifiedBankruptcyScore,
CurrentEmployedMonths_ln = log(1 + EmployedMonths)*as.numeric(EmploymentStatus == 'Employed'),
TotalMonthlyIncome_ln = log(1 + TotalMonthlyIncome),
isLowDebt = as.numeric(TotalMonthlyDebtBeforeLoan < 300),
isUndecided = as.numeric(VehicleMake == 'UNDECIDED'),
isHighMileage = as.numeric(VehicleMileage >= 100000),
isNewVehicle = as.numeric(isNewVehicle == 'Y'),
TotalVehicleValue_ln = log(1 + TotalVehicleValue),
AmountRequested = AmountRequested,
isHomeowner = as.numeric(OccupancyStatus == "OWN" | OccupancyStatus == 'BUYING'),
LTV_sq = LTV ** 2,
LTV = LTV,
DTI_cu = DTI ** 3,
DTI_sq = DTI ** 2,
DTI = DTI,
MemberIndicator = as.numeric(MemberIndicator == 'Y'),
CoApplicantIndicator = as.numeric(CoApplicantIndicator == 'Y'),
EstimatedProfit = (Loanterm*EstimatedMonthlyPayment) - AmountRequested,
Approved = NA)
probabilities <- 1/(1 + exp(-predict(object = model, newdata = df_clean)))
decisions <- probabilities %>%
replace(list = (probabilities > upper.bound), values = "Approved") %>%
replace(list = (probabilities < lower.bound), values = "Declined") %>%
replace(list = (probabilities >= lower.bound & probabilities <= upper.bound), values = "No Decision")
if (override){
decisions <- replace(decisions, df_clean$EstimatedProfit >= 0 & df_clean$EstimatedProfit <= 1, 'Declined')
decisions <- replace(decisions, df$TotalMonthlyIncome < 1000, 'Declined')
}
output <- tibble(LoanNumber = df$LoanNumber, Prediction = decisions)
return(output)
}
LoanDecider(model = fit, df = test)
start_time = Sys.time()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
set.seed(10)
train_fp <- "~/UCF Dataset 2018 - Training set.csv"		#The filepath of the training data
test_fp <- "~/UCF Dataset 2018 - Testing set.csv"		#The filepath of the test data
train <- read_csv(train_fp, col_types = cols(LoanNumber = "d",
LoanStatus = "c",
Source = "c",
AppReceiveDate = "c",
ModifiedCreditScore = "i",
ModifiedBankruptcyScore = "i",
EmploymentStatus = "c",
EmployedMonths = "i",
PrevEmployedMonths = "i",
CoEmployedMonths = "i",
CoPrevEmployedMonths = "i",
PrimeMonthlyIncome = "d",
CototalMonthlyIncome = "d",
TotalMonthlyIncome = "d",
PrimeMonthlyLiability = "d",
CoMonthlyLiability = "d",
PrimeMonthlyRent = "d",
CoMonthlyRent = "d",
TotalMonthlyRentBeforeLoan = "d",
VehicleYear = "i",
VehicleMake = "c",
VehicleMileage = "n",
isNewVehicle = "c",
TotalVehicleValue = "d",
AmountRequested = "d",
DownPayment = "d",
Loanterm = "i",
OccupancyStatus = "c",
OccupancyDuration = "i",
EstimatedMonthlyPayment = "d",
NumberofOpenRevolvingAccounts = "i",
LTV = "d",
RequestType = "c",
DTI = "d",
MemberIndicator = "c",
CoApplicantIndicator = "c"))
test <- read_csv(test_fp, col_types = cols(LoanNumber = "d",
LoanStatus = "c",
Source = "c",
AppReceiveDate = "c",
ModifiedCreditScore = "i",
ModifiedBankruptcyScore = "i",
EmploymentStatus = "c",
EmployedMonths = "i",
PrevEmployedMonths = "i",
CoEmployedMonths = "i",
CoPrevEmployedMonths = "i",
PrimeMonthlyIncome = "d",
CototalMonthlyIncome = "d",
TotalMonthlyIncome = "d",
PrimeMonthlyLiability = "d",
CoMonthlyLiability = "d",
PrimeMonthlyRent = "d",
CoMonthlyRent = "d",
TotalMonthlyRentBeforeLoan = "d",
VehicleYear = "i",
VehicleMake = "c",
VehicleMileage = "n",
isNewVehicle = "c",
TotalVehicleValue = "d",
AmountRequested = "d",
DownPayment = "d",
Loanterm = "i",
OccupancyStatus = "c",
OccupancyDuration = "i",
EstimatedMonthlyPayment = "d",
NumberofOpenRevolvingAccounts = "i",
LTV = "d",
RequestType = "c",
DTI = "d",
MemberIndicator = "c",
CoApplicantIndicator = "c"))
cleanAutoLoanData <- function(df, df.train = FALSE){
df_clean <- as.tibble(df)
if(df.train){
df_clean <- df_clean %>%
filter(EmployedMonths < 1200,
TotalMonthlyIncome >= 1000,
TotalVehicleValue < 1000000,
AmountRequested < 200000,
(Loanterm*EstimatedMonthlyPayment) - AmountRequested >= 1 | (Loanterm*EstimatedMonthlyPayment) - AmountRequested < 0)
}
df_clean <- df_clean %>%
mutate(AppReceiveDate = as.numeric(as.Date(AppReceiveDate, format = '%m/%d/%Y') - 16436),
LTV = replace(LTV, LTV > 2.5, 2.5),
LTV = replace(LTV, is.na(LTV), 1),
DTI = replace(DTI, DTI > 0.5 | is.na(DTI), 0.5),
OccupancyStatus = replace(OccupancyStatus, is.na(OccupancyStatus), 'OTHER')) %>%
transmute(LoanNumber = LoanNumber,
AppReceiveDate_cu = AppReceiveDate ** 3,
AppReceiveDate_sq = AppReceiveDate ** 2,
AppReceiveDate = AppReceiveDate,
isCredit_F = as.numeric(ModifiedCreditScore == 0),
isCredit_D = as.numeric(ModifiedCreditScore >= 400 & ModifiedCreditScore < 630),
isCredit_C = as.numeric(ModifiedCreditScore >= 630 & ModifiedCreditScore < 670),
isCredit_B = as.numeric(ModifiedCreditScore >= 670 & ModifiedCreditScore < 740),
ModifiedCreditScore_cu = ModifiedCreditScore ** 3,
ModifiedCreditScore_sq = ModifiedCreditScore ** 2,
ModifiedCreditScore = ModifiedCreditScore,
BankruptcyCredit = ModifiedCreditScore * ModifiedBankruptcyScore,
ModifiedBankruptcyScore_sq = ModifiedBankruptcyScore **2,
ModifiedBankruptcyScore = ModifiedBankruptcyScore,
CurrentEmployedMonths_ln = log(1 + EmployedMonths)*as.numeric(EmploymentStatus == 'Employed'),
TotalMonthlyIncome_ln = log(1 + TotalMonthlyIncome),
isLowDebt = as.numeric(TotalMonthlyDebtBeforeLoan < 300),
isUndecided = as.numeric(VehicleMake == 'UNDECIDED'),
isHighMileage = as.numeric(VehicleMileage >= 100000),
isNewVehicle = as.numeric(isNewVehicle == 'Y'),
TotalVehicleValue_ln = log(1 + TotalVehicleValue),
AmountRequested = AmountRequested,
isHomeowner = as.numeric(OccupancyStatus == "OWN" | OccupancyStatus == 'BUYING'),
LTV_sq = LTV ** 2,
LTV = LTV,
DTI_cu = DTI ** 3,
DTI_sq = DTI ** 2,
DTI = DTI,
MemberIndicator = as.numeric(MemberIndicator == 'Y'),
CoApplicantIndicator = as.numeric(CoApplicantIndicator == 'Y'),
EstimatedProfit = (Loanterm*EstimatedMonthlyPayment) - AmountRequested,
Approved = LoanStatus == 'Approved')
return(df_clean)
}
LoanDecider_val <- function(model, df, override = TRUE, lower.bound = 0.5, upper.bound = 0.5){
df_clean <- cleanAutoLoanData(df, FALSE)
probabilities <- 1/(1 + exp(-predict(object = model, newdata = df_clean)))
decisions <- probabilities %>%
replace(list = (probabilities > upper.bound), values = "Approved") %>%
replace(list = (probabilities < lower.bound), values = "Declined") %>%
replace(list = (probabilities >= lower.bound & probabilities <= upper.bound), values = "No Decision")
if (override){
decisions <- replace(decisions, df_clean$EstimatedProfit >= 0 & df_clean$EstimatedProfit <= 1, 'Declined')
decisions <- replace(decisions, df$TotalMonthlyIncome < 100, 'Declined')
}
output <- tibble(LoanNumber = df$LoanNumber, Prediction = decisions, Actual = df$LoanStatus)
return(output)
}
showValidationStats <- function(validation) {
automation <- mean(validation$Prediction == 'Approved' | validation$Prediction == 'Declined')
accuracy <- mean(validation$Prediction == validation$Actual)
a_precision <- sum(validation$Prediction == validation$Actual & validation$Prediction == 'Approved') / sum(validation$Prediction == 'Approved')
a_sensitivity <- sum(validation$Prediction == validation$Actual & validation$Prediction == 'Approved') / sum(validation$Actual == 'Approved')
d_precision <- sum(validation$Prediction == validation$Actual & validation$Prediction == 'Declined') / sum(validation$Prediction == 'Declined')
d_sensitivity <- sum(validation$Prediction == validation$Actual & validation$Prediction == 'Declined') / sum(validation$Actual == 'Declined')
print(table(Pred. = validation$Prediction, Actual = validation$Actual))
cat('Automation Level: ', automation, '\n')
cat('Accuracy Level: ', accuracy, '\n')
cat('Approval Precision Level: ', a_precision, '\n')
cat('Approval Sensitivity Level: ', a_sensitivity, '\n')
cat('Denial Precision Level: ', d_precision, '\n')
cat('Denial Sensitivity Level: ', d_sensitivity, '\n')
}
sub_train <- train %>% sample_frac(.8)
sub_valid <- anti_join(train, sub_train, by='LoanNumber')
sub_train <- cleanAutoLoanData(sub_train, TRUE)
fit_val <- glm(Approved ~  AppReceiveDate_cu + AppReceiveDate_sq + AppReceiveDate + isCredit_F + isCredit_D + isCredit_C + isCredit_B + ModifiedCreditScore_cu + ModifiedCreditScore_sq + ModifiedCreditScore + BankruptcyCredit + ModifiedBankruptcyScore_sq + ModifiedBankruptcyScore + CurrentEmployedMonths_ln + TotalMonthlyIncome_ln + isLowDebt + isUndecided + isHighMileage + isNewVehicle + TotalVehicleValue_ln + AmountRequested + isHomeowner +LTV_sq + LTV + DTI_cu + DTI_sq + DTI +  MemberIndicator + CoApplicantIndicator, data = sub_train, family = binomial())
validation_results <- LoanDecider_val(fit_val, sub_valid)
showValidationStats(validation_results)
train_clean <- cleanAutoLoanData(train, df.train = TRUE)
fit <- glm(Approved ~  AppReceiveDate_cu + AppReceiveDate_sq + AppReceiveDate + isCredit_F + isCredit_D + isCredit_C + isCredit_B + ModifiedCreditScore_cu + ModifiedCreditScore_sq + ModifiedCreditScore + BankruptcyCredit + ModifiedBankruptcyScore_sq + ModifiedBankruptcyScore + CurrentEmployedMonths_ln + TotalMonthlyIncome_ln + isLowDebt + isUndecided + isHighMileage + isNewVehicle + TotalVehicleValue_ln + AmountRequested + isHomeowner +LTV_sq + LTV + DTI_cu + DTI_sq + DTI +  MemberIndicator + CoApplicantIndicator, data = train_clean, family = binomial())
LoanDecider <- function(model, df, override = TRUE, lower.bound = 0.5, upper.bound = 0.5){
df_clean <- df %>%
mutate(AppReceiveDate = as.numeric(as.Date(AppReceiveDate, format = '%m/%d/%Y')) - 16436,
LTV = replace(LTV, LTV > 2.5, 2.5),
LTV = replace(LTV, is.na(LTV), 1),
DTI = replace(DTI, DTI > 0.5 | is.na(DTI), 0.5),
OccupancyStatus = replace(OccupancyStatus, is.na(OccupancyStatus), 'OTHER')) %>%
transmute(LoanNumber = LoanNumber,
AppReceiveDate_cu = AppReceiveDate ** 3,
AppReceiveDate_sq = AppReceiveDate ** 2,
AppReceiveDate = AppReceiveDate,
isCredit_F = as.numeric(ModifiedCreditScore == 0),
isCredit_D = as.numeric(ModifiedCreditScore >= 400 & ModifiedCreditScore < 630),
isCredit_C = as.numeric(ModifiedCreditScore >= 630 & ModifiedCreditScore < 670),
isCredit_B = as.numeric(ModifiedCreditScore >= 670 & ModifiedCreditScore < 740),
ModifiedCreditScore_cu = ModifiedCreditScore ** 3,
ModifiedCreditScore_sq = ModifiedCreditScore ** 2,
ModifiedCreditScore = ModifiedCreditScore,
BankruptcyCredit = ModifiedCreditScore * ModifiedBankruptcyScore,
ModifiedBankruptcyScore_sq = ModifiedBankruptcyScore **2,
ModifiedBankruptcyScore = ModifiedBankruptcyScore,
CurrentEmployedMonths_ln = log(1 + EmployedMonths)*as.numeric(EmploymentStatus == 'Employed'),
TotalMonthlyIncome_ln = log(1 + TotalMonthlyIncome),
isLowDebt = as.numeric(TotalMonthlyDebtBeforeLoan < 300),
isUndecided = as.numeric(VehicleMake == 'UNDECIDED'),
isHighMileage = as.numeric(VehicleMileage >= 100000),
isNewVehicle = as.numeric(isNewVehicle == 'Y'),
TotalVehicleValue_ln = log(1 + TotalVehicleValue),
AmountRequested = AmountRequested,
isHomeowner = as.numeric(OccupancyStatus == "OWN" | OccupancyStatus == 'BUYING'),
LTV_sq = LTV ** 2,
LTV = LTV,
DTI_cu = DTI ** 3,
DTI_sq = DTI ** 2,
DTI = DTI,
MemberIndicator = as.numeric(MemberIndicator == 'Y'),
CoApplicantIndicator = as.numeric(CoApplicantIndicator == 'Y'),
EstimatedProfit = (Loanterm*EstimatedMonthlyPayment) - AmountRequested,
Approved = NA)
probabilities <- 1/(1 + exp(-predict(object = model, newdata = df_clean)))
decisions <- probabilities %>%
replace(list = (probabilities > upper.bound), values = "Approved") %>%
replace(list = (probabilities < lower.bound), values = "Declined") %>%
replace(list = (probabilities >= lower.bound & probabilities <= upper.bound), values = "No Decision")
if (override){
decisions <- replace(decisions, df_clean$EstimatedProfit >= 0 & df_clean$EstimatedProfit <= 1, 'Declined')
decisions <- replace(decisions, df$TotalMonthlyIncome < 1000, 'Declined')
}
output <- tibble(LoanNumber = df$LoanNumber, Prediction = decisions)
return(output)
}
LoanDecider(model = fit, df = test)
end_time = Sys.time()
end_time - start_time
start_time = Sys.time()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
set.seed(10)
train_fp <- "~/UCF Dataset 2018 - Training set.csv"		#The filepath of the training data
test_fp <- "~/UCF Dataset 2018 - Testing set.csv"		#The filepath of the test data
train <- read_csv(train_fp, col_types = cols(LoanNumber = "d",
LoanStatus = "c",
Source = "c",
AppReceiveDate = "c",
ModifiedCreditScore = "i",
ModifiedBankruptcyScore = "i",
EmploymentStatus = "c",
EmployedMonths = "i",
PrevEmployedMonths = "i",
CoEmployedMonths = "i",
CoPrevEmployedMonths = "i",
PrimeMonthlyIncome = "d",
CototalMonthlyIncome = "d",
TotalMonthlyIncome = "d",
PrimeMonthlyLiability = "d",
CoMonthlyLiability = "d",
PrimeMonthlyRent = "d",
CoMonthlyRent = "d",
TotalMonthlyRentBeforeLoan = "d",
VehicleYear = "i",
VehicleMake = "c",
VehicleMileage = "n",
isNewVehicle = "c",
TotalVehicleValue = "d",
AmountRequested = "d",
DownPayment = "d",
Loanterm = "i",
OccupancyStatus = "c",
OccupancyDuration = "i",
EstimatedMonthlyPayment = "d",
NumberofOpenRevolvingAccounts = "i",
LTV = "d",
RequestType = "c",
DTI = "d",
MemberIndicator = "c",
CoApplicantIndicator = "c"))
test <- read_csv(test_fp, col_types = cols(LoanNumber = "d",
LoanStatus = "c",
Source = "c",
AppReceiveDate = "c",
ModifiedCreditScore = "i",
ModifiedBankruptcyScore = "i",
EmploymentStatus = "c",
EmployedMonths = "i",
PrevEmployedMonths = "i",
CoEmployedMonths = "i",
CoPrevEmployedMonths = "i",
PrimeMonthlyIncome = "d",
CototalMonthlyIncome = "d",
TotalMonthlyIncome = "d",
PrimeMonthlyLiability = "d",
CoMonthlyLiability = "d",
PrimeMonthlyRent = "d",
CoMonthlyRent = "d",
TotalMonthlyRentBeforeLoan = "d",
VehicleYear = "i",
VehicleMake = "c",
VehicleMileage = "n",
isNewVehicle = "c",
TotalVehicleValue = "d",
AmountRequested = "d",
DownPayment = "d",
Loanterm = "i",
OccupancyStatus = "c",
OccupancyDuration = "i",
EstimatedMonthlyPayment = "d",
NumberofOpenRevolvingAccounts = "i",
LTV = "d",
RequestType = "c",
DTI = "d",
MemberIndicator = "c",
CoApplicantIndicator = "c"))
cleanAutoLoanData <- function(df, df.train = FALSE){
df_clean <- as.tibble(df)
if(df.train){
df_clean <- df_clean %>%
filter(EmployedMonths < 1200,
TotalMonthlyIncome >= 1000,
TotalVehicleValue < 1000000,
AmountRequested < 200000,
(Loanterm*EstimatedMonthlyPayment) - AmountRequested >= 1 | (Loanterm*EstimatedMonthlyPayment) - AmountRequested < 0)
}
df_clean <- df_clean %>%
mutate(AppReceiveDate = as.numeric(as.Date(AppReceiveDate, format = '%m/%d/%Y') - 16436),
LTV = replace(LTV, LTV > 2.5, 2.5),
LTV = replace(LTV, is.na(LTV), 1),
DTI = replace(DTI, DTI > 0.5 | is.na(DTI), 0.5),
OccupancyStatus = replace(OccupancyStatus, is.na(OccupancyStatus), 'OTHER')) %>%
transmute(LoanNumber = LoanNumber,
AppReceiveDate_cu = AppReceiveDate ** 3,
AppReceiveDate_sq = AppReceiveDate ** 2,
AppReceiveDate = AppReceiveDate,
isCredit_F = as.numeric(ModifiedCreditScore == 0),
isCredit_D = as.numeric(ModifiedCreditScore >= 400 & ModifiedCreditScore < 630),
isCredit_C = as.numeric(ModifiedCreditScore >= 630 & ModifiedCreditScore < 670),
isCredit_B = as.numeric(ModifiedCreditScore >= 670 & ModifiedCreditScore < 740),
ModifiedCreditScore_cu = ModifiedCreditScore ** 3,
ModifiedCreditScore_sq = ModifiedCreditScore ** 2,
ModifiedCreditScore = ModifiedCreditScore,
BankruptcyCredit = ModifiedCreditScore * ModifiedBankruptcyScore,
ModifiedBankruptcyScore_sq = ModifiedBankruptcyScore **2,
ModifiedBankruptcyScore = ModifiedBankruptcyScore,
CurrentEmployedMonths_ln = log(1 + EmployedMonths)*as.numeric(EmploymentStatus == 'Employed'),
TotalMonthlyIncome_ln = log(1 + TotalMonthlyIncome),
isLowDebt = as.numeric(TotalMonthlyDebtBeforeLoan < 300),
isUndecided = as.numeric(VehicleMake == 'UNDECIDED'),
isHighMileage = as.numeric(VehicleMileage >= 100000),
isNewVehicle = as.numeric(isNewVehicle == 'Y'),
TotalVehicleValue_ln = log(1 + TotalVehicleValue),
AmountRequested = AmountRequested,
isHomeowner = as.numeric(OccupancyStatus == "OWN" | OccupancyStatus == 'BUYING'),
LTV_sq = LTV ** 2,
LTV = LTV,
DTI_cu = DTI ** 3,
DTI_sq = DTI ** 2,
DTI = DTI,
MemberIndicator = as.numeric(MemberIndicator == 'Y'),
CoApplicantIndicator = as.numeric(CoApplicantIndicator == 'Y'),
EstimatedProfit = (Loanterm*EstimatedMonthlyPayment) - AmountRequested,
Approved = LoanStatus == 'Approved')
return(df_clean)
}
LoanDecider_val <- function(model, df, override = TRUE, lower.bound = 0.5, upper.bound = 0.5){
df_clean <- cleanAutoLoanData(df, FALSE)
probabilities <- 1/(1 + exp(-predict(object = model, newdata = df_clean)))
decisions <- probabilities %>%
replace(list = (probabilities > upper.bound), values = "Approved") %>%
replace(list = (probabilities < lower.bound), values = "Declined") %>%
replace(list = (probabilities >= lower.bound & probabilities <= upper.bound), values = "No Decision")
if (override){
decisions <- replace(decisions, df_clean$EstimatedProfit >= 0 & df_clean$EstimatedProfit <= 1, 'Declined')
decisions <- replace(decisions, df$TotalMonthlyIncome < 100, 'Declined')
}
output <- tibble(LoanNumber = df$LoanNumber, Prediction = decisions, Actual = df$LoanStatus)
return(output)
}
showValidationStats <- function(validation) {
automation <- mean(validation$Prediction == 'Approved' | validation$Prediction == 'Declined')
accuracy <- mean(validation$Prediction == validation$Actual)
a_precision <- sum(validation$Prediction == validation$Actual & validation$Prediction == 'Approved') / sum(validation$Prediction == 'Approved')
a_sensitivity <- sum(validation$Prediction == validation$Actual & validation$Prediction == 'Approved') / sum(validation$Actual == 'Approved')
d_precision <- sum(validation$Prediction == validation$Actual & validation$Prediction == 'Declined') / sum(validation$Prediction == 'Declined')
d_sensitivity <- sum(validation$Prediction == validation$Actual & validation$Prediction == 'Declined') / sum(validation$Actual == 'Declined')
print(table(Pred. = validation$Prediction, Actual = validation$Actual))
cat('Automation Level: ', automation, '\n')
cat('Accuracy Level: ', accuracy, '\n')
cat('Approval Precision Level: ', a_precision, '\n')
cat('Approval Sensitivity Level: ', a_sensitivity, '\n')
cat('Denial Precision Level: ', d_precision, '\n')
cat('Denial Sensitivity Level: ', d_sensitivity, '\n')
}
sub_train <- train %>% sample_frac(.8)
sub_valid <- anti_join(train, sub_train, by='LoanNumber')
sub_train <- cleanAutoLoanData(sub_train, TRUE)
fit_val <- glm(Approved ~  AppReceiveDate_cu + AppReceiveDate_sq + AppReceiveDate + isCredit_F + isCredit_D + isCredit_C + isCredit_B + ModifiedCreditScore_cu + ModifiedCreditScore_sq + ModifiedCreditScore + BankruptcyCredit + ModifiedBankruptcyScore_sq + ModifiedBankruptcyScore + CurrentEmployedMonths_ln + TotalMonthlyIncome_ln + isLowDebt + isUndecided + isHighMileage + isNewVehicle + TotalVehicleValue_ln + AmountRequested + isHomeowner +LTV_sq + LTV + DTI_cu + DTI_sq + DTI +  MemberIndicator + CoApplicantIndicator, data = sub_train, family = binomial())
validation_results <- LoanDecider_val(fit_val, sub_valid)
showValidationStats(validation_results)
train_clean <- cleanAutoLoanData(train, df.train = TRUE)
fit <- glm(Approved ~  AppReceiveDate_cu + AppReceiveDate_sq + AppReceiveDate + isCredit_F + isCredit_D + isCredit_C + isCredit_B + ModifiedCreditScore_cu + ModifiedCreditScore_sq + ModifiedCreditScore + BankruptcyCredit + ModifiedBankruptcyScore_sq + ModifiedBankruptcyScore + CurrentEmployedMonths_ln + TotalMonthlyIncome_ln + isLowDebt + isUndecided + isHighMileage + isNewVehicle + TotalVehicleValue_ln + AmountRequested + isHomeowner +LTV_sq + LTV + DTI_cu + DTI_sq + DTI +  MemberIndicator + CoApplicantIndicator, data = train_clean, family = binomial())
LoanDecider <- function(model, df, override = TRUE, lower.bound = 0.5, upper.bound = 0.5){
df_clean <- df %>%
mutate(AppReceiveDate = as.numeric(as.Date(AppReceiveDate, format = '%m/%d/%Y')) - 16436,
LTV = replace(LTV, LTV > 2.5, 2.5),
LTV = replace(LTV, is.na(LTV), 1),
DTI = replace(DTI, DTI > 0.5 | is.na(DTI), 0.5),
OccupancyStatus = replace(OccupancyStatus, is.na(OccupancyStatus), 'OTHER')) %>%
transmute(LoanNumber = LoanNumber,
AppReceiveDate_cu = AppReceiveDate ** 3,
AppReceiveDate_sq = AppReceiveDate ** 2,
AppReceiveDate = AppReceiveDate,
isCredit_F = as.numeric(ModifiedCreditScore == 0),
isCredit_D = as.numeric(ModifiedCreditScore >= 400 & ModifiedCreditScore < 630),
isCredit_C = as.numeric(ModifiedCreditScore >= 630 & ModifiedCreditScore < 670),
isCredit_B = as.numeric(ModifiedCreditScore >= 670 & ModifiedCreditScore < 740),
ModifiedCreditScore_cu = ModifiedCreditScore ** 3,
ModifiedCreditScore_sq = ModifiedCreditScore ** 2,
ModifiedCreditScore = ModifiedCreditScore,
BankruptcyCredit = ModifiedCreditScore * ModifiedBankruptcyScore,
ModifiedBankruptcyScore_sq = ModifiedBankruptcyScore **2,
ModifiedBankruptcyScore = ModifiedBankruptcyScore,
CurrentEmployedMonths_ln = log(1 + EmployedMonths)*as.numeric(EmploymentStatus == 'Employed'),
TotalMonthlyIncome_ln = log(1 + TotalMonthlyIncome),
isLowDebt = as.numeric(TotalMonthlyDebtBeforeLoan < 300),
isUndecided = as.numeric(VehicleMake == 'UNDECIDED'),
isHighMileage = as.numeric(VehicleMileage >= 100000),
isNewVehicle = as.numeric(isNewVehicle == 'Y'),
TotalVehicleValue_ln = log(1 + TotalVehicleValue),
AmountRequested = AmountRequested,
isHomeowner = as.numeric(OccupancyStatus == "OWN" | OccupancyStatus == 'BUYING'),
LTV_sq = LTV ** 2,
LTV = LTV,
DTI_cu = DTI ** 3,
DTI_sq = DTI ** 2,
DTI = DTI,
MemberIndicator = as.numeric(MemberIndicator == 'Y'),
CoApplicantIndicator = as.numeric(CoApplicantIndicator == 'Y'),
EstimatedProfit = (Loanterm*EstimatedMonthlyPayment) - AmountRequested,
Approved = NA)
probabilities <- 1/(1 + exp(-predict(object = model, newdata = df_clean)))
decisions <- probabilities %>%
replace(list = (probabilities > upper.bound), values = "Approved") %>%
replace(list = (probabilities < lower.bound), values = "Declined") %>%
replace(list = (probabilities >= lower.bound & probabilities <= upper.bound), values = "No Decision")
if (override){
decisions <- replace(decisions, df_clean$EstimatedProfit >= 0 & df_clean$EstimatedProfit <= 1, 'Declined')
decisions <- replace(decisions, df$TotalMonthlyIncome < 1000, 'Declined')
}
output <- tibble(LoanNumber = df$LoanNumber, Prediction = decisions)
return(output)
}
LoanDecider(model = fit, df = test)
end_time = Sys.time()
end_time - start_time
# DPR_Data_explore
library(readr)
train <- train.df <- read.csv("")
